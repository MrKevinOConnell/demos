"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateManifest = void 0;
// TODO: Uncomment when a new version exists
// import schema_0_0_1_alpha_2 from "@web3api/manifest-schema/formats/0.0.1-prealpha.2.json";
var _0_0_1_prealpha_1_json_1 = __importDefault(require("@web3api/manifest-schema/formats/0.0.1-prealpha.1.json"));
var jsonschema_1 = require("jsonschema");
var ValidationError;
(function (ValidationError) {
    ValidationError["ADDITIONAL_PROPERTY"] = "additionalProperties";
    ValidationError["TYPE"] = "type";
    ValidationError["REQUIRED"] = "required";
    ValidationError["INPUT"] = "format";
})(ValidationError || (ValidationError = {}));
var manifestSchemas = {
    "0.0.1-prealpha.1": _0_0_1_prealpha_1_json_1.default,
};
var validator = new jsonschema_1.Validator();
jsonschema_1.Validator.prototype.customFormats.file = function (file) {
    return validateFile(file);
};
function validateFile(path) {
    if (typeof path !== "string") {
        return false;
    }
    // eslint-disable-next-line no-useless-escape
    var validPathMatch = path.match(/^((\.\/|..\/)[^\/ ]*)+\/?$/gm);
    if (validPathMatch && validPathMatch[0]) {
        return validPathMatch[0].length === path.length;
    }
    else {
        return false;
    }
}
jsonschema_1.Validator.prototype.customFormats.manifestFormat = function (format) {
    return validateFormat(format);
};
function validateFormat(format) {
    if (typeof format !== "string") {
        return false;
    }
    return manifestSchemas[format] !== undefined;
}
function validateManifest(manifest) {
    var schema = manifestSchemas[manifest.format];
    if (!schema) {
        throw Error("Unrecognized manifest schema format \"" + manifest.format + "\"");
    }
    var errors = validator.validate(manifest, schema).errors;
    /*
     We should handle five cases or errors:
     1- When a non-accepted field is added to the manifest
     2- When the type of the field is unknown
     3- When a required field is not sent
     4- When version string is not correct
     5- When file string is not an existing file
    */
    if (errors.length > 0) {
        var _a = errors[0], path = _a.path, message = _a.message, name_1 = _a.name, argument = _a.argument, instance = _a.instance;
        var pathMapping = path.join(" -> ");
        switch (name_1) {
            case ValidationError.REQUIRED: {
                var propertyRequired = path.length === 0 ? argument + "." : argument + " in " + pathMapping + ".";
                throw Error("Missing field: " + propertyRequired + " Please add it to the manifest");
            }
            case ValidationError.ADDITIONAL_PROPERTY:
                throw Error("Field " + argument + " is not accepted in the schema. Please check the accepted fields here: TODO - LINK_TO_SCHEMA");
            case ValidationError.TYPE: {
                var property = path.length === 1 ? "Property " + path[0] : "Property " + pathMapping;
                throw Error(property + " has a type error: " + message);
            }
            case ValidationError.INPUT: {
                var isFormatVersionError = argument === "manifestFormat";
                var isFileError = argument === "file";
                if (isFormatVersionError) {
                    throw Error("The manifest's format is not correct. Given: " + manifest.format + "\nAccepted formats: " + Object.keys(manifestSchemas));
                }
                else if (isFileError) {
                    throw Error("Property " + pathMapping + " has the value \"" + instance + "\", which is not a valid file path." +
                        " Please use unix style relative paths.");
                }
                else {
                    throw Error("Unknown INPUT error found:" +
                        ("\nName: " + name_1 + "\nPath: " + pathMapping + "\nMessage: " + message + "\nArgument: " + argument + "\nValue: " + instance));
                }
            }
            default:
                throw Error("Unknown manifest sanitization error:" +
                    ("\nName: " + name_1 + "\nPath: " + pathMapping + "\nMessage: " + message + "\nArgument: " + argument + "\nValue: " + instance));
        }
    }
}
exports.validateManifest = validateManifest;
//# sourceMappingURL=validate.js.map