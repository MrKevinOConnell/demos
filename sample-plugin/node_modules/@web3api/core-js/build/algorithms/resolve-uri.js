"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveUri = void 0;
var types_1 = require("../types");
var manifest_1 = require("../manifest");
var ApiResolver = __importStar(require("../apis/api-resolver"));
var get_implementations_1 = require("./get-implementations");
function resolveUri(uri, client, createPluginApi, createApi, noValidate) {
    return __awaiter(this, void 0, void 0, function () {
        var resolvedUri, uriHistory, trackUriRedirect, redirects, _loop_1, _i, redirects_1, redirect, state_1, uriResolverImplementations, i, uriResolver, data, newUri, manifestStr, convertedUri, manifest;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    resolvedUri = uri;
                    uriHistory = [
                        {
                            uri: resolvedUri.uri,
                            source: "ROOT",
                        },
                    ];
                    trackUriRedirect = function (uri, source) {
                        var dupIdx = uriHistory.findIndex(function (item) { return item.uri === uri; });
                        uriHistory.push({
                            uri: uri,
                            source: source,
                        });
                        if (dupIdx > -1) {
                            throw Error("Infinite loop while resolving URI \"" + uri + "\".\nResolution Stack: " + JSON.stringify(uriHistory, null, 2));
                        }
                    };
                    redirects = client.redirects();
                    _loop_1 = function (redirect) {
                        var from = redirect.from;
                        if (!from) {
                            throw Error("Redirect missing the from property.\nEncountered while resolving " + uri.uri);
                        }
                        // Determine what type of comparison to use
                        var tryRedirect = function (testUri) {
                            return types_1.Uri.equals(testUri, from) ? redirect.to : testUri;
                        };
                        var uriOrPlugin = tryRedirect(resolvedUri);
                        if (types_1.Uri.isUri(uriOrPlugin)) {
                            if (uriOrPlugin.uri !== resolvedUri.uri) {
                                trackUriRedirect(uriOrPlugin.uri, redirect.from.toString());
                                resolvedUri = uriOrPlugin;
                            }
                        }
                        else {
                            return { value: createPluginApi(resolvedUri, uriOrPlugin) };
                        }
                    };
                    // Iterate through all redirects. If anything matches
                    // apply the redirect. If the redirect `to` is a Plugin,
                    // return a PluginWeb3Api instance.
                    for (_i = 0, redirects_1 = redirects; _i < redirects_1.length; _i++) {
                        redirect = redirects_1[_i];
                        state_1 = _loop_1(redirect);
                        if (typeof state_1 === "object")
                            return [2 /*return*/, state_1.value];
                    }
                    uriResolverImplementations = get_implementations_1.getImplementations(new types_1.Uri("w3/api-resolver"), redirects);
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < uriResolverImplementations.length)) return [3 /*break*/, 4];
                    uriResolver = uriResolverImplementations[i];
                    return [4 /*yield*/, ApiResolver.Query.tryResolveUri(client, uriResolver, resolvedUri)];
                case 2:
                    data = (_a.sent()).data;
                    // If nothing was returned, the URI is not supported
                    if (!data || (!data.uri && !data.manifest)) {
                        return [3 /*break*/, 3];
                    }
                    newUri = data.uri;
                    manifestStr = data.manifest;
                    if (newUri) {
                        convertedUri = new types_1.Uri(newUri);
                        trackUriRedirect(convertedUri.uri, uriResolver.uri);
                        resolvedUri = convertedUri;
                        i = 0;
                        return [3 /*break*/, 3];
                    }
                    else if (manifestStr) {
                        manifest = manifest_1.deserializeManifest(manifestStr, { noValidate: noValidate });
                        return [2 /*return*/, createApi(resolvedUri, manifest, uriResolver)];
                    }
                    _a.label = 3;
                case 3:
                    ++i;
                    return [3 /*break*/, 1];
                case 4: 
                // We've failed to resolve the URI
                throw Error("No Web3API found at URI: " + uri.uri);
            }
        });
    });
}
exports.resolveUri = resolveUri;
//# sourceMappingURL=resolve-uri.js.map