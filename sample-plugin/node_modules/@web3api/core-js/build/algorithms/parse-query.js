"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseQuery = void 0;
function parseQuery(uri, doc, variables) {
    if (doc.definitions.length === 0) {
        throw Error("Empty query document found.");
    }
    var queryInvocations = {};
    for (var _i = 0, _a = doc.definitions; _i < _a.length; _i++) {
        var def = _a[_i];
        if (def.kind !== "OperationDefinition") {
            throw Error("Unrecognized root level definition type: " + def.kind + "\n" +
                "Please use a 'query' or 'mutation' operations.");
        }
        // Get the module name (query or mutation)
        var module_1 = def.operation;
        if (module_1 === "subscription") {
            throw Error("Subscription queries are not yet supported.");
        }
        // Get the method name
        var selectionSet = def.selectionSet;
        var selections = selectionSet.selections;
        if (selections.length === 0) {
            throw Error("Empty selection set found. Please include the name of a method you'd like to query.");
        }
        for (var _b = 0, selections_1 = selections; _b < selections_1.length; _b++) {
            var selection = selections_1[_b];
            if (selection.kind !== "Field") {
                throw Error("Unsupported selection type found: " + selection.kind + "\n" +
                    "Please query a method.");
            }
            var method = selection.name.value;
            var invocationName = selection.alias ? selection.alias.value : method;
            if (queryInvocations[invocationName]) {
                throw Error("Duplicate query name found \"" + invocationName + "\". Please use GraphQL aliases that each have unique names.");
            }
            // Get all input arguments
            var selectionArgs = selection.arguments;
            var input = {};
            if (selectionArgs) {
                for (var _c = 0, selectionArgs_1 = selectionArgs; _c < selectionArgs_1.length; _c++) {
                    var arg = selectionArgs_1[_c];
                    var name_1 = arg.name.value;
                    if (input[name_1]) {
                        throw Error("Duplicate input argument found: " + name_1);
                    }
                    var valueDef = arg.value;
                    input[name_1] = extractValue(valueDef, variables);
                }
            }
            // Get the results the query is asking for
            var selectionResults = selection.selectionSet;
            var resultFilter = undefined;
            if (selectionResults) {
                resultFilter = extractSelections(selectionResults);
            }
            queryInvocations[invocationName] = {
                uri: uri,
                module: module_1,
                method: method,
                input: input,
                resultFilter: resultFilter,
            };
        }
    }
    return queryInvocations;
}
exports.parseQuery = parseQuery;
function extractValue(node, variables) {
    if (node.kind === "Variable") {
        // Get the argument's value from the variables object
        if (!variables) {
            throw Error("Variables were not specified, tried to resolve variable from query. Name: " + node.name.value + "\n");
        }
        if (!variables[node.name.value]) {
            throw Error("Missing variable: " + node.name.value);
        }
        return variables[node.name.value];
    }
    else if (node.kind === "StringValue" ||
        node.kind === "EnumValue" ||
        node.kind === "BooleanValue") {
        return node.value;
    }
    else if (node.kind === "IntValue") {
        return Number.parseInt(node.value);
    }
    else if (node.kind === "FloatValue") {
        return Number.parseFloat(node.value);
    }
    else if (node.kind === "NullValue") {
        return null;
    }
    else if (node.kind === "ListValue") {
        var length_1 = node.values.length;
        var result = [];
        for (var i = 0; i < length_1; ++i) {
            result.push(extractValue(node.values[i], variables));
        }
        return result;
    }
    else if (node.kind === "ObjectValue") {
        var length_2 = node.fields.length;
        var result = {};
        for (var i = 0; i < length_2; ++i) {
            var field = node.fields[i];
            result[field.name.value] = extractValue(field.value, variables);
        }
        return result;
    }
    else {
        throw Error("Unsupported value node: " + node);
    }
}
function extractSelections(node) {
    var result = {};
    for (var _i = 0, _a = node.selections; _i < _a.length; _i++) {
        var selection = _a[_i];
        if (selection.kind !== "Field") {
            throw Error("Unsupported result selection type found: " + selection.kind);
        }
        var name_2 = selection.name.value;
        if (result[name_2]) {
            throw Error("Duplicate result selections found: " + name_2);
        }
        if (selection.selectionSet) {
            result[name_2] = extractSelections(selection.selectionSet);
        }
        else {
            result[name_2] = true;
        }
    }
    return result;
}
//# sourceMappingURL=parse-query.js.map